import os
import uuid
import json
import requests

URL = "https://clovastudio.stream.ntruss.com/v3/tasks/5s8nem58/chat-completions"

SYSTEM_PROMPT = """
[역할]
너는 한국어 설문 요약기다. 주어진 "설문 집계 JSON"을 분석해 아래 "최종 출력 스키마"의 단일 JSON만 생성한다. 설명/머릿말/코드블록/주석 없이 오직 JSON 한 개만 출력한다.

[입력 형식]
- 입력은 배열(Array)이며, 각 원소는 { "질문문구(한글)": { "others": [자유서술...], "선택지A": 정수, "선택지B": 정수, ... } } 형태다.
- "others"가 없을 수 있다. 빈 문자열 키("")는 무응답이다.

[집계 규칙 (정확)]
1) 수치 집계에서 제외: "others" 배열, 키 ""(빈 문자열), "기타".
2) 각 객관식 문항의 총응답수 = (선택지들의 정수 합). 여러 문항의 총 응답수가 다르면, 대표값(최빈/중앙값 중 하나)을 참가자 수(totalCount)로 사용한다.
3) percent는 선택된 문항의 “최다 선택지 득표수 / totalCount × 100”을 반올림한 정수다(동률이면 사전순으로 결정).
4) 자유서술(others)은 은 하단의 클러스터팅 규칙을 따른다.


[others 클러스터링·카운팅(간단)]
- 목적: 키워드 선정(긍정 3·부정 2)과 content/comment 맥락 강화에만 사용. percent 계산에는 포함하지 않음.
- 정규화: 공백/문장부호/이모지 제거, 소문자화, 전·반각 통일. 한 글자·의미 없는 토큰(d,f,x,...)은 삭제.
- 동의어 묶기(예): {이메일 삭제, 읽은 메일 삭제, 메일함 비우기}→“이메일삭제” / {파일·데이터 정리, 중복 파일 정리}→“데이터정리” / {참여하기 번거로움, 접근성 부족}→“참여장벽”.
- 유사도: 핵심 명사·동사 키워드 교집합≥2 **또는** 편집거리≤2면 같은 클러스터로 합침.
- 카운팅: 문항별 others를 클러스터 단위로 개수 집계→ 상위 테마를 키워드 후보에 반영(긍정은 행동/효익, 부정은 부족/장벽/개선).
- 노이즈 필터: “d”, “ddd”, “....” 등 무의미 문자열은 제외.


[최종 출력 스키마]
{
  "content": string,                 // 전체 핵심 요약(문장 1개, 과장 금지, 140자 이내 권장)
  "keywords": [#string, #string, #string, #string, #string],  // 정확히 5개(긍정 3 + 부정 2, 규칙 아래 참조)
  "sentences": [                     // **3~5개**
    { "title": string, "comment": string, "percent": number },
    ...
  ],
}


[sentences 생성 규칙 (3~5개)]
0) titlePrefix: 제목은 반드시 아래 이모지 집합 중 적절한 하나로 시작하고, 뒤에 공백 1칸을 둔다(없으면 🌟로 대체).
   {📈📊✨🛠️🌱🌍💪🚀🤝📣📧🧹💡⚡🚍🚲⚠️🚧❓🤔🔄🌟}
1. percent: 각 항목의 choicePercent 값을 그대로 쓴다(단위 기호 %는 쓰지 않음).
2. title: question 또는 topChoices의 핵심을 1문장으로 요약한다
3. comment 문장 스타일(예시 형식 유지):
    - “{percent}%의 응답자가 {핵심태그}에 응답했어요. {간단한 이유/맥락 한 문장}”
    - 핵심 단어를 {}로 감싼다: 퍼센트는 {62%}처럼 숫자+% 전체를, 주요 키워드는 {편의성}, 선택지는 ‘{매우 편리함}’처럼 감싼다.
    - 60~90자 내외, 존댓말, 과장 금지. 질문과 topChoices를 자연스럽게 요약.
4. 분류: pros/cons 구분 없음. 긍·부정 뉘앙스는 title·comment에 자연스럽게 반영.
5. 중복/합치기: 유사 항목은 상위 percent 중심으로 최대 1개로 합치고, 설명에 보완 맥락을 넣는다. 동일 주제를 중복 생성하지 않는다.
6. 개수: 최소 3개, 최대 5개를 생성한다.
7. 사실성: comment는 입력 JSON의 question/topChoices/choicePercent만 근거로 작성. 추정 금지.
8. 성별과 같은 민감항목은 제외하고 제품·서비스 속성만 요약.


[content 요약 생성 규칙]
- 문장은 80글자를 넘지 않는다.
- 한 문장에 주요 긍정 포인트 1개와 개선 요구 1개를 담는다.
- 긍정 포인트를 먼저 작성하고 이후에 개선 요구사항을 적는다.
- 나열은 최대 3개 이내, 유사 항목은 “A·B 등”으로 묶기.
- 과장/주관 표현 지양, 1인칭 금지.


[문장 스타일]
- 간결한 한국어 평서문, 총 1문장.
- 문장 끝은 친근하고 부드럽게 ‘해요체’로 마무리(예: ~해요/~예요; ~합니다 지양).
- 전문 용어 최소화, 중복 표현 제거.
- 숫자 비노출 원칙(명확한 비율이 있을 때만 “대다수/절반 이상” 등 완곡 표현).


[검증 및 자기수정]
- 루트 키: content, keywords(5), sentences(3~5) 만 존재.
- sentences 각 항목의 percent 값이 실제 계산과 일치.
- keywords는 **긍정 3 + 부정 2** 구성을 충족(모호하면 이익/행동=긍정, 부족/개선/장벽=부정).
- 출력은 오직 JSON 한 개. 규칙 위반 시 스스로 수정 후 최종 JSON만 재출력.

"""


TEST_INPUT = """
[{"디지털 탄소 발자국이란 개념에 대해 들어본 적 있으신가요?": {"예": 5, "others": [], "잘암": 1, "들어봄": 11, "아니오": 7, "관련없음": 0}}, {"디지털 탄소 발자국이 환경에 미치는 영향에 대해 얼마나 인지하고 계신가요?": {"": 1, "others": [], "보통": 4, "많이 앎": 3, "약간 앎": 13, "전혀 모름": 3}}, {"본인이 생각하는 디지털 탄소 발자국 감축을 위한 가장 효과적인 방법은 무엇입니까?": {"others": ["솔직히 불필요한 이메일 삭제가 최고인 거 같고 제일 효과적일 거 같은데 자주 이메일함을 안 들여봐서 문제다...\n "], "기타": 0, "데이터 저장 최소화": 4, "불필요한 이메일 삭제": 9, "에너지 절약형 기기 사용": 6, "전자기기 교체 주기 연장": 4}}, {"환경 보호를 위한 개인 차원의 노력에는 어떤 것들이 있다고 생각하십니까?": {"others": [], "기타": 0, "전기 절약": 2, "대중교통 이용": 9, "쓰레기 분리 배출": 7, "친환경 제품 구매": 6}}, {"환경 캠페인에 참여할 의향이 있으신가요?": {"": 2, "others": ["하기 쉽도록 되어있거나 제가 자주 가는 곳에 그게 있으면 한번쯤 도전해볼 거 같아요"], "보통": 7, "있음": 12, "매우 있음": 1, "전혀 없음": 1}}, {"디지털 탄소 발자국을 줄이기 위한 방법 중 어디까지 실천 가능하다고 보십니까?": {"others": ["접근성이 좋거나 제가 하는데 시간 오래 들지 않는다면 도전할 거 같습니다."], "이미 실천 중": 0, "다수 실천 가능": 2, "완전히 실천 가능": 6, "몇 가지 실천 가능": 14, "아무것도 할 수 없음": 1}}, {"디지털 탄소 발자국이라는 용어를 처음 접했을 때의 느낌과 생각을 자유롭게 적어주세요.": {"others": ["디지털 탄소 발자국에 대해서 알고 있었는데 못 지키는 편이라 좀 일상생활에서 그것을 지킬 수 있게 도움을 주는 무언가가 있었으면 좋겠다. 뭔가 앱이나 장치를 까는 거는 내가 안할 거 같아서 이메일함 비우기면 카공을 주로하는 카페에서 장려를 한다든지 외부에서 일깨워줄 수 있는 게 필요한 거 같아요 ", "전혀 생각하지 못한 이슈였다. 하지만 깊게 고민하게 되는 사회적 이슈임에 틀림없다", "탄소 발자국이라는 말이 뜻과 연결이 안돼서 뜻을 정확히 알지 못한다면 한번에 알기 힘들 것 같습니다", "생소한 단어의 결합", "탄소 발자국이라는 개념을 어렴풋이 알고 있기에, 디지털 탄소 발자국는 그 안에서 조금 더 구체적으로 디지털 에너지와 관련된 부분이 아닐까 하는 생각이 들었다. 최근에 챗지피티와의 대화에서 불필요한 인삿말 등을 나누면 불필요한 디지털 데이터를 발생시키기에 환경파괴에 일조하는거나 다름없다는 내용의 영상을 본 적이 있어서, 이와 관련된 건가?하는 생각도 들었다.", "다소 생소한 느낌의 단어 였습니자", "탄소 발자국이라는 용어가 잘 와닿지 않았다", "디지털 사용에 따라 발생하는 환경문제를 고려하는 주제라고 생각이들었음", "디지털 환경에서 남는 탄소 발자국이라는 느낌이 들어서, ‘디지털 환경 내에 남은 기록이라는 뜻인가?’라고 생각했습니다.", "용어는 많이 접해봤지만 구체적인 실천 방법 등을 많이 들어보진 못했습니다", "d", "d", "d", "dddddddd", "f", "d", "d", "dbd", "ddd", "d", "dfsdfsdf", "d", "ssmsmsmsmmsm", "조금 생소하게 느껴졌고 디지털 환경 내에 무언가를 남기는 거라고 생각했어요."]}}, {"디지털 탄소 발자국을 줄이기 위해 현재 실천 중인 방법들을 적어주세요.": {"others": ["지금 거의 안하고 있긴 한데.. 전공 특성상 뭔가 파일을 잘 정리하는 것이 유일한 실천 방법? 근데 그마저도 지구를 위한 거라긴 보단 제가 꼭 필요한 상황이어서 하게 되는 거 같아요! ", "따로 없습니다.", "이메일 삭제하기, 불필요한 데이터 삭제하기", "읽은 메일은 삭제하기", "의식적인 노력을 딱히 하고있지는 않은 것 같다. 종종 생각날 때 이메일함을 비우는 정도?", "일회용 제품을  사용하지 말것", "이메일 삭제", "딱히 실천중인게 없네요..", "디지털 탄소 발자국을 줄이기 위한 목적으로는 딱히 크게 실천하고 있는 건 없고, 전반적인 환경 오염을 줄이기 위해 분리수거, 다회용 용기 사용 등만 실천하고 있습니다.", "전자기기를 오래 사용할 수 있도록합니다", "d", "d", "d", "d", "j", "d", "k", "dndn", "x", "d", "asfsfsdf", "c", "ss", "분리수거를 열심히 하고 있어요."]}}]
"""

headers = {
    "Authorization": "Bearer nv-ea00f37975da413595b8ded2f7ce71a9Aqu7",
    "Content-Type": "application/json"
}

payload = {
    "messages": [
        {
            "role": "system",
            "content": [
                {"type": "text", "text": SYSTEM_PROMPT}
            ]
        },
        {
            "role": "user",
            "content": [
                {"type": "text", "text": TEST_INPUT}
            ]
        }
    ],
    "topP": 0.8,
    "topK": 0,
    "maxTokens": 2500,
    "temperature": 0.5,
    "repetitionPenalty": 1.1,
    "stop": []
}

def main():
    # SSE 수신을 위해 stream=True
    with requests.post(URL, headers=headers, json=payload, stream=True, timeout=300) as r:
        print("Status Code:", r.status_code)
        ct = r.headers.get("Content-Type", "")
        print("Content-Type:", ct)

        # SSE 스트림이면 줄 단위로 출력
        if r.ok and "text/event-stream" in ct:
            for line in r.iter_lines(decode_unicode=True):
                if not line:
                    continue
                # 일반적으로 "data: { ... }" 형태
                if line.startswith("data:"):
                    data = line[len("data:"):].strip()
                    if data == "[DONE]":
                        print("\n[DONE]")
                        break
                    print(data)
        else:
            # 혹시 SSE가 아닌 JSON 응답이 온 경우 대비
            try:
                print(json.dumps(r.json(), indent=2, ensure_ascii=False))
            except Exception:
                print(r.text)

if __name__ == "__main__":
    main()